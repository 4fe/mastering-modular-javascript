[[modular-patterns-and-practices]]
== Modular Patterns and Practices

In this chapter we'll take a look at some of the latest language features and how we can leverage those in our programs while reducing complexity in the process. We'll also analyze concrete coding patterns and conventions that can help us develop simple alternatives to otherwise complex problems.

=== 5.1 Leveraging Modern JavaScript

When used conscientiously, the latest JavaScript features can be of great help in reducing the amount of code whose sole purpose is to work around language limitations, increasing signal -- the amount of valuable information that can be extracted from reading a piece of code -- while eliminating boilerplate and repetition.

==== 5.1.1 Template Literals

Before ES6, the JavaScript community came up with half a dozen ways of arriving at multi-line strings: from strings chained with `\` escape characters or `+` arithmetic operators, to using `Array#join`, or resorting to the string representation of comments in a function -- all merely for multi-line support.

Further, inserting variables into a string isn't possible, but that's easily circumvented by concatenating them with one or more strings.

[source,javascript]
----
'Hello ' + name + ', I\'m Nicolás!'
----

Template literals arrived in ES6 and resolve multi-line strings in a feature that was native to the language, without the need for any clever hacks in user-space.

Unlike strings, with template literals we can interpolate expressions using a streamlined syntax. They involve less escaping, too, thanks to using backticks instead of single or double quotation marks, which appear more frequently in English text.

[source,javascript]
----
`Hello ${ name }, I'm Nicolás!`
----

Besides these improvements, template literals also offer the possibility of tagged templates. You can prefix the template with a custom function that transforms the template's output use cases like input sanitization, formatting, or anything else.

Whenever we need to compose a string using data, template literals are a terse alternative to string concatenation. When we want to avoid escaping single or double quotes, template literals can help. The same is true when we want to write multi-line strings.

In every other case -- when there's no interpolation, escaping, or multi-line needs -- the choice comes down to a mere matter of style. In the last chapter of Practical Modern JavaScript, "Practical Considerations", I advocatedfootnoteref:[template-literals,You can read a blog post I wrote about why template literals are better than strings at: https://mjavascript.com/out/template-literals. Practical Modern JavaScript (O'Reilly, 2017) is the first book in the Modular JavaScript series. You're currently reading the second book of the same series.] in favor of using template literals in every case. This was for a few factors, but here's the two most important ones: because of convenience, so that you don't have to convert a string back and forth between single quoted string and template literals depending on its contents; and because of consistency, so that you don't have to stop and think about which kind of quotation mark -- single, double, or backtick -- to use each time. Template literals may take some time to get accustomed to: we've used single quoted strings for a long time, and template literals have only been around for a while. You or your team might prefer sticking with single quoted strings, and that's perfectly fine too.

[NOTE]
====
When it comes to style choices, you'll rarely face problems if you let your team come to a consensus about the preferred style choice and later enforce that choice by way of a lint tool like ESLint. It's entirely valid ot stick with single quoted strings and only use template literals when deemed absolutely necessary, if that's what most of the team prefers.

Using a tool like ESLint and a continuous integration job to enforce its rules means nobody has to perform the time consuming job of keeping everyone in line with the house style. When tooling enforces style choices, discussions about those choices won't crop up as often in discussion threads while contributors are collaborating on units of work.
====

It's important to differentiate between purely stylistic choices, which tend to devolve in contentious time-sinking discussions, and choices where there's more ground to be covered in the everlasting battle against complexity. While the former may make a codebase subjectively easier to read, or aesthetically pleasing, it is only through deliberate action that we'll keep complexity in check. Granted, a consistent style throughout a codebase can help contain complexity, but the exact style is unimportant as long as we enforce it consistently.

==== 5.1.2 Destructuring, Rest, and Spread

The destructuring, rest and spread features came into effect in ES6. These features accomplish a number of different things, which we'll now discuss.

Destructuring helps us indicate the fields of an object that we'll be using to compute the output of a function. In the following example, we destructure a few properties from a `ticker` variable, and then combine that with a `...details` rest pattern containing every property of `ticker` that we haven't explicitly named in our destructuring pattern.

[source,javascript]
----
const { low, high, ask, ...details } = ticker
----

When we use destructuring methodically and near the top of our functions, or -- even better -- in the parameter list, we are making it obvious what the exact contract of our function is in terms of inputs.

Deep destructuring offers the ability to take this one step further, digging as deep as necessary into the structure of the object we're accessing. Consider the following example, where we destructure the JSON response body with details about an apartment. When we have a destructuring statement like this near the top of a function that's used to render a view, the aspects of the apartment listing are needed to render it become self-evident at a glance. In addition, we avoid repetition when accessing property chains like `response.contact.name` or `response.contact.phone`.

[source,javascript]
----
const {
  title,
  description,
  askingPrice,
  features: {
    area,
    bathrooms,
    bedrooms,
    amenities
  },
  contact: {
    name,
    phone,
    email
  }
} = response
----

One contention point might be that, at times, the deeply destructured property name doesn't make sense outside of its context. For instance, we've introduce `name` to our scope, but it's the name of the contact for the listing, not to be confused with the name of the listing itself. In these cases, the alternative may be to give `response.contact.name` an alias whereby we add the parent property as a prefix, so that we're left with `name: contactName`.

Object spread helps us create a shallow copy of an object using a little native syntax. We can also combine object spread with our own properties, so that we create a copy that also overwrites the values in the original object we're spreading.

[source,javascript]
----
const faxCopy = { ...fax }
const newCopy = { ...fax, date: new Date() }
----

This allows us to create slightly modified shallow copies of other objects. When dealing with discrete state management, this means we don't need to resort to `Object.assign` method calls or utility libraries. While there's nothing inherently wrong with `Object.assign` calls, the object spread `...` abstraction is easier for us to internalize and mentally map its meaning back to `Object.assign` without us realizing it, and so the code becomes easier to read because we're dealing with less unabstracted knowledge.

==== 5.1.3 Striving for simple `const` bindings

If we use `const` by default, then the need to use `let` or `var` can be ascribed to code that's more complicated than it should be. Striving to avoid those kinds of bindings almost always leads to better and simpler code.

In section 4.2.4 we've looked into the case where a `let` binding is assigned a default value, and have conditional statements immediately after, that might change the contents of the variable binding.

[source,javascript]
----
// …
let type = 'contributor'
if (user.administrator) {
  type = 'administrator'
} else if (user.roles.includes('edit_articles')) {
  type = 'editor'
}
// …
----

Most reasons why we may need to use `let` or `var` bindings are variants of the above and can be resolved by extracting the assignments into a function where the returned value is then assigned to a `const` binding. This moves the complexity out of the way, and eliminates the need for looking ahead to see if the binding is reassigned at some point in the code flow later on.

[source,javascript]
----
// …
const type = getUserType(user)
// …

function getUserType(user) {
  if (user.administrator) {
    return 'administrator'
  }
  if (user.roles.includes('edit_articles')) {
    return 'editor'
  }
  return 'contributor'
}
----

A variation of this problem is when we repeatedly assign the result of an operation to the same binding, in order to split it into several lines.

[source,javascript]
----
let values = [1, 2, 3, 4, 5]
values = values.map(value => value * 2)
values = values.filter(value => value > 5)
// <- [6, 8, 10]
----

A better approach would be to create new bindings every time, computing their values based on the previous binding, and picking up the benefits of using `const` in doing so -- where we can rest assured that the binding doesn't change later in the flow.

[source,javascript]
----
const initialValues = [1, 2, 3, 4, 5]
const doubledValues = initialValues.map(value => value * 2)
const finalValues = doubledValues.filter(value => value > 5)
// <- [6, 8, 10]
----

Let's move onto a more interesting topic: asynchronous code flows.

==== 5.1.4 Asynchronous Functions and Promises




.. why converting flows to promises may be a good way of simplifying it, on the basis that a lot of the language now is built around support for promises

=== 5.2 Composition and Inheritance

..

==== 5.2.1 Aspects and Decorators

how we can decorate components either via composition or decorators to add features to them, and reuse that logic for other kinds of components..

==== 5.2.2 The Perks of Inheritance

.. how inheritance can be useful when there's an abstract interface to implement and methods to override, thinking of React's Component in terms of `render()` being an abstract method to be implemented and pretty much every other method being a virtual method [in C# terms], explains benefits of these kinds of contracts. maybe hint at 5.5.2 protocols

==== 5.2.3 Choosing between Composition and Inheritance

in real apps you'll seldom have to use inheritance except when connecting to specific frameworks you depend on, or for specific patterns, everywhere else probably use composition [ellaborate on that]

=== 5.3 Code Patterns

..

==== 5.3.1 Revealing Module

.. this one is sort-of obvious but explain how hiding most of a class in a function can help avoid unwarranted access

==== 5.3.2 Object Factories

.. and how they're great for keeping state contained to the instance

==== 5.3.3 Event Emission

.. events for things that we want to have clearly-delineated side-effects.

==== 5.3.4 Message Passing

.. situations like SW, normal workers, extensions, frames.

=== 5.4 Data manipulation use cases

.. tips and tricks to consider when working with data. not isolated methods but instead use cases.
.. Mapping data
Filtering through data
When should we `Array#reduce`?

==== 5.4.1 Filtering and mapping data

.. chat about filtering and mapping, how iterators can help create a pipeline, but how tools like `lodash` also do this when we use the wrapper style, and how this shouldn't be a topmost concern of ours

==== 5.4.2 Reducing lists into as hash-maps

.. (and other use cases for reduce)

==== 5.4.3 The caveats of `Array#reduce`

.. it's not used often, but when it's used, it's quite often for the wrong reasons. explain why it can be very complex to understand if the use case isn't correct

=== 5.5 Conventions and Protocols

..

==== 5.5.1 Enforcing User-Defined Contracts

.. coming up with own conventions, what/why and how to enforce it. probably talk of Symbol

==== 5.5.2 JavaScript Protocols

[aka interface]

.. the proposal: https://github.com/michaelficarra/proposal-first-class-protocols

==== 5.5.3 Conventions at a Large Scale

.. talk about conventions such as MVC, React's view rendering mechanism, or other large-scale conventions we adopt and seldom think about etc
